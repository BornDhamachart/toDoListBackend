model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  fname     String
  lname     String
  role      Role     @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groups    Group[]
  labels    Label[]
}

model Group {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime?
  completed   Boolean       @default(false)
  priority    TaskPriority?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  groupId     Int
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  labels      Label[]
  subTasks    Subtask[]
}

model Label {
  id        Int      @id @default(autoincrement())
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
  userId    Int
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subtask {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

enum TaskPriority {
  Critical
  High
  Medium
  Low
}

enum Role {
  Admin
  User
}

// model Picture {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   data      Bytes
// }
